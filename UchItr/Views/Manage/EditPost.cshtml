@model UchItr.Models.Post

@{
    ViewBag.Title = "EditPost";
}

<div class="section section-breadcrumbs">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h2>EditPost</h2>
            </div>
        </div>
    </div>
</div>


<div class="container">
    <div class="row">
        <div class="col-sm-10">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>Post</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @*<div class="form-group">
                    @Html.LabelFor(model => model.UserID, "UserID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("UserID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                    </div>
                </div>*@
                    <div class="form-group">
                    <div class="col-md-10">
                        <h2>Main image</h2>
                        <div class="single-post-image">
                            @{
                                if (Model.Image == null)
                                {
                                    <img id="mainImage" src="" alt="main Image" class="img-responsive" />
                                }
                                else
                                {
                                    <img id="mainImage" src="@Url.Content(Model.Image.LinkImg)" alt="main Image" class="img-responsive" />
                                }
                            }

                        </div>
                    </div>
                </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Image.LinkImg, "Link img", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Image.LinkImg, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Image.LinkImg, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.CategoryID, "CategoryID", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ShortDescription, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                    @Html.LabelFor(model => model.Body, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Body, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
                    </div>
                </div>*@
                    <div class="form-group">
                        @Html.LabelFor(model => model.Body, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.Body, new { @id = "editor" })
                            <script>
                    CKEDITOR.replace('editor');
                            </script>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Published, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.Published)
                                @Html.ValidationMessageFor(model => model.Published, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @*<div class="form-group">
                    @Html.LabelFor(model => model.NetLikeCount, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NetLikeCount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NetLikeCount, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                    @*<div class="form-group">
                    @Html.LabelFor(model => model.PostedOn, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PostedOn, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PostedOn, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
                </div>
               
            }
        </div>
    </div>
    <div class="row">
        <div class="col-sm-10" id="dropZone">
            <p>drag&drop</p>
            <form action="~/Home/SaveUploadedFile" method="post" enctype="multipart/form-data" class="dropzone" id="dropzoneForm" background none; border none;">
                <div class="fallback">
                    <input name="file" type="file" multiple />
                    <input type="submit" value="Upload" />
                </div>
            </form>
        </div>
    </div>
</div>
<style>
    #dropZone {
        background: #aec62c;
        border: white dashed 3px;
        padding: 50px;
        text-align: center;
        color: white;
    }
</style>


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    //File Upload response from the server
    Dropzone.options.dropzoneForm = {
        init: function () {
            this.on("complete", function (data) {
                //var res = eval('(' + data.xhr.responseText + ')');
                var res = JSON.parse(data.xhr.responseText);
                var html2Add = "<input type='text' name='lol' value='"+res.name+"'/>";
                $('#dropzoneForm').append(html2Add);
                $("#mainImage").attr("src", res.name);
                $("#Image_LinkImg").attr("value", res.name);
            }),
            this.on("addedfile", function() {
                if (this.files[1]!=null){
                    this.removeFile(this.files[0]);
                }
            });
        },
        maxFiles: 1
    };
</script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
